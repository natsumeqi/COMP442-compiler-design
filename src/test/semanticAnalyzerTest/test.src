// ====== Class declarations ====== //
class POLYNOMIAL {
	public func evaluate(float x) : float;

	public func evaluate2(float x) : float;                       // 6.2
};
class POLYNOMIAL {                                                    // 8.1
	public func evaluate(float x) : float;
        public func evaluate(integer x) : integer;                    // 9.2
};
class LINEAR inherits POLYNOMIAL {
  private float a;
  private float b;
  private integer b;                                            // 8.3
  
  public func build(float A, float B) : LINEAR;
  public func evaluate(float x) : float;                        // 9.3

  func foo(float dd[2]):float;
  func foo1(float dd[][2][3]):float;
};

class QUADRATIC inherits POLYNOMIAL {
	private float a;                                              // 8.5
	private float b;                                              // 8.5
	private float c;

	public func build(float A, float B, float C) : QUADRATIC;
	public func evaluate(float x) : float;                        // 9.3
};


class C inherits E {
	private integer a;
};

class D inherits C {
	private integer b;
};

class E inherits D {                                                   // 14.1
	private integer c;
};


// ====== Function Definitions ====== //
func POLYNOMIAL::evaluate(float x) : float
{
  return (0);
}

func LINEAR::evaluate(float x) : float 
{
  var
  {
    float result;
  }
  result = 0.0;
  result = a * x + b;
  return (result);
}
  
func QUADRATIC::evaluate(float x) : float
{
  var    
  {
    float result;
  }
  //Using Horner's method
  result = a;
  result = result * x + b;
  result = result * x + c;
  return (result);
}
  
func LINEAR::build(float A, float B) : LINEAR 
{
  var 
  {
    LINEAR new_function;
  }
  new_function.a = A;
  new_function.b = B;
  return (new_function);
}


func LINEAR::foo(float dd[3]): float
{
    f4(dd[3]);                                                // call a function before it is defined
}

func LINEAR::foo1(float dd[][3][4]): float{}            // array dimension



func QUADRATIC::build(float A, float B, float C) : QUADRATIC
{
  var
  {
    QUADRATIC new_function;
  }
  new_function.a = A + B * 3;                                     // 10.1
  new_function.b = B;
  new_function.c = "string";                                        // 10.2
  return (1);                                                       // 10.3
}



func QUADRATIC::build2(float A, float B, float C) : QUADRATIC       // 6.1
{
  var
  {
    QUADRATIC new_function;
  }
  new_function.a = A;
  new_function.b = B;
  new_function.c = C;
  return (new_function);
}


func f(integer i) : void {}                                                    
func f(integer i) : void {}                                         // 8.2
func f(integer i, integer i) : integer {}                           // 9.1

func f3(integer p1[2][3]) : integer {}

func f4(float i[]):void{}


// ====== main ====== //
main
{
  var
  {
    A a;                                                            // 11.5
    C c;
    linear f1;
    quadratic f2;
    integer counter;
    float counter;                                                  // 8.4
    integer i[2][3];
    integer j[1][2][3];

    integer aa[];                   // allowed
    integer bb[3];                  // allowed
    integer cc[][];                 // not allowed, need to know how many elements per row

  }
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  c.b = 1;                                                          // 11.2
  counter = c.f();                                                  // 11.3
  undefined();                                                      // 11.4
  counter = a;                                                      // 11.1

  f(1,1,1);                                                         // 12.1
  f(1.2,1);                                                         // 12.2
  f(1);
  f(1,1);
  i[2] = 1;                                                         // 13.1
  i["hello"][1.3] = 2;                                              // 13.2
  f3(j);                                                            // 13.3
  counter.x = 1;                                                    // 15.1


  //f1.a[1]=1;                      // 13.1
  counter = d;                      // 11.1
  f1.c =1;                          // 15.1


  f4(bb);                           // allowed
  aa = bb;                          // allowed




  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));                            // 12.2
    write(f2.evaluate(counter));                            // 12.2
  };
}

